--
-- Example configuration file for dmserial to read temperature values from a
-- DKRF400 sensor connected through USB/RS-232 on TTY `/dev/ttyU0` (9600 8N2).
--
-- To run dmserial as a sole data logger, remove the receiver `dmdb` from
-- observation `observ_meter`, and set output file and format.
--
-- All backslashes `\` in this file have to be escaped as `\\`.
--
-- Rename table "dmserial" to the instance name (parameter `--name`).
--
-- Settings:
--
--      baudrate - Baud rate (4800, 9600, 19200, 115200, ...).
--      bytesize - Byte size (5, 6, 7, 8)
--      debug    - Forward log messages of level DEBUG via IPC (if logger is set).
--      dtr      - DTR on/off.
--      format   - Output format, either `csv` or `jsonl`.
--      jobs     - List of jobs to perform.
--      logger   - Name of logger instance (implies log forwarding).
--      node     - Node id.
--      output   - Path of output file, or `-` for stdout (optional).
--      parity   - Parity (`none`, `even`, `odd`).
--      rts      - RTS on/off.
--      sensor   - Sensor id.
--      stopbits - Number of stop bits (1 or 2).
--      timeout  - Read timeout in seconds.
--      path     - Path of TTY/PTY device (for example, `/dev/ttyUSB0`).
--      verbose  - Print logs to standard error.
--
-- Optionally, import an additional Lua file `myfile.lua` by adding the
-- following line to the configuration:
--
--      dofile("myfile.lua")
--
-- Or, if the file is a library and in the Lua search path:
--
--      require("myfile")
--
-- The following node id, sensor id, and target id must exist in the database,
-- or be set accordingly.
--
node_id   = "dummy-node"
sensor_id = "dkrf400"
target_id = "meter"

--
-- The observations to be used in jobs list. The attribute `receivers` may
-- contain a list of up to 16 processes to forward the observation to.
--
observ_start = {
    --
    -- Enable sensor by sending a carriage return.
    -- Reads the response of the sensor but does not parse it.
    --
    name = "start",
    target_id = target_id,
    receivers = { },
    requests = {
        {
            name = "start",
            request = "\\r",
            delimiter = "\\n",
            pattern = "",
            delay = 500
        }
    }
}

observ_stop = {
    --
    -- Stop "Meter Mode". The sensor response will be ignored if no delimiter
    -- is set (as the DKRF400 does not always return a response to the command).
    --
    name = "stop",
    target_id = target_id,
    receivers = { },
    requests = {
        {
            name = "stop",
            request = "s\\r",
            delimiter = "",
            pattern = "",
            delay = 500
        }
    }
}

observ_meter = {
    --
    -- Single measurement. Reads temperature, rel. and abs. humidity, dew
    -- point, and wet-bulb temperature. The names of the responses are limited
    -- to 8 characters.
    --
    name = "meter",
    target_id = target_id,
    receivers = { "dmdb" },
    requests = {
        {
            name = "get-values",
            request = "Meter\\r",
            delimiter = "\\n",
            pattern = "^\\s*(?<temp>[-0-9.]+)\\s.C\\s+.t\\s+(?<humrel>[-0-9.]+)\\s%\\s+.t\\s+(?<humabs>[-0-9.]+)\\sg.m3.t\\s+(?<dew>[-0-9.]+)\\s.C\\s+.t\\s+(?<wetbulb>[-0-9.]+)",
            delay = 0,
            responses = {
                { name = "temp",    unit = "degC", type = RESPONSE_TYPE_REAL64 }, -- Temperature.
                { name = "humrel",  unit = "%",    type = RESPONSE_TYPE_REAL64 }, -- Relative humidity.
                { name = "humabs",  unit = "g/m3", type = RESPONSE_TYPE_REAL64 }, -- Absolute humidity.
                { name = "dew",     unit = "degC", type = RESPONSE_TYPE_REAL64 }, -- Dew point.
                { name = "wetbulb", unit = "degC", type = RESPONSE_TYPE_REAL64 }  -- Wet-bulb temperature.
            }
        }
    }
}

dmserial = {
    logger = "",
    node = node_id,
    sensor = sensor_id,
    output = "",
    format = "",
    path = "/dev/ttyU0",
    baudrate = 9600,
    bytesize = 8,
    parity = "none",
    stopbits = 2,
    timeout = 0,
    dtr = true,
    rts = true,
    jobs = {
        {
            --
            -- Start sensor.
            --
            disabled = false,
            onetime = true,
            observation = observ_start,
            delay = 1000
        },
        {
            --
            -- Stop "Meter Mode".
            --
            disabled = false,
            onetime = true,
            observation = observ_stop,
            delay = 1000
        },
        {
            --
            -- Read sensor values, wait 5 seconds, repeat.
            --
            disabled = false,
            onetime = false,
            observation = observ_meter,
            delay = 5 * 1000
        }
    },
    debug = false,
    verbose = true
}
