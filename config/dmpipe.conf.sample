--
-- Example configuration file for dmpipe. The sysctl(8) command to read the CPU
-- temperature and the battery life is available on FreeBSD only. On Linux, you
-- probably want to use dmfs to read from `/proc` instead.
--
-- Observations are forwarded to `dmrecv`. To run dmpipe as a sole data logger,
-- remove the receiver from the observation, and set output file and format.
--
-- Rename table "dmpipe" to the instance name (parameter `--name`).
--
-- Settings:
--
--      debug   - Forward log messages of level DEBUG via IPC (if logger is set).
--      format  - Output format, either `csv` or `jsonl`.
--      jobs    - List of jobs to perform.
--      logger  - Name of logger instance (implies log forwarding).
--      node    - Node id.
--      output  - Path of output file, or `-` for stdout (optional).
--      sensor  - Sensor id.
--      verbose - Print logs to standard error.
--

--
-- Observation to be put in the jobs list.
--
observ = {
    name = "dummy-observ",
    target_id = "dummy-target",
    receivers = { "dmrecv" },
    requests = {
        --
        -- Read CPU temperature.
        --
        {
            request = "sysctl hw.acpi.thermal.tz0.temperature",
            pattern = "hw\\.acpi\\.thermal\\.tz0\\.temperature: (?<tz0>[-+0-9\\.,]+)C",
            delay = 0,
            responses = {
                {
                    name = "tz0",
                    unit = "degC"
                }
            }
        },
        --
        -- Read laptop battery status.
        --
        {
            request = "sysctl hw.acpi.battery.life",
            pattern = "hw\\.acpi\\.battery\\.life: (?<battery>[0-9]+)",
            delay = 0,
            responses = {
                {
                    name = "battery",
                    unit = "%"
                }
            }
        }
    }
}

dmpipe = {
    logger = "",
    node = "dummy-node",
    sensor = "dummy-sensor",
    output = "",
    format = "none",
    jobs = {
        {
            disabled = false,
            onetime = true,
            delay = 2 * 1000
        },
        {
            disabled = false,
            onetime = false,
            observation = observ,
            delay = 1 * 1000
        }
    },
    debug = false,
    verbose = true
}
